package net.exploit.binaryCalc;

import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextArea;
import javafx.scene.control.ToggleGroup;

import java.util.regex.Pattern;

public class Controller {

    // 0:Dual ### 1:1K ### 2:2K
    int mode = 0;

    private ToggleGroup modeGroup = new ToggleGroup();

    @FXML
    RadioButton radioDual, radio1K, radio2K;

    @FXML
    TextArea textCalc, textResult;

    public void initialize() {
        // Radio Buttons
        radioDual.setToggleGroup(modeGroup);
        radio1K.setToggleGroup(modeGroup);
        radio2K.setToggleGroup(modeGroup);
        modeGroup.selectToggle(radioDual);

        // Text Areas
        textResult.setEditable(false);
    }

    public void modeDual(Event e) {
        if (modeGroup.getSelectedToggle() != radioDual)
            modeGroup.selectToggle(radioDual);
    }

    public void mode1K(Event e) {
        //if (modeGroup.getSelectedToggle() != radio1K)
        // modeGroup.selectToggle(radio1K);
    }

    public void mode2K(Event e) {
        if (modeGroup.getSelectedToggle() != radio2K)
            modeGroup.selectToggle(radio2K);
    }

    public void btnCalculate(Event e) {
        String result = "";
        for (String s : textCalc.getText().split("\n"))
            if (validateLine(s))
                result += calculate(s) + "\n";
            else
                result += "Invalid expression\n";
        textResult.setText(result);
    }

    private String calculate(String line) {
        String result = "";
        String[] add = line.split(Pattern.quote("+"));
        //String[] parts = new String[add.length];

        int r = 0;
        int i = 0;
        for (String s : add) {
            int x = binaryToDez(s);
            //parts[i] = s;
            r = r + x;
            if (i != 0)
                result += " + " + x;
            else
                result += x;
            i++;
        }
        result += " = " + r;
        return result;
    }

    private boolean validateLine(String s) {
        return validateLine(s, 0, '#');
    }

    private boolean validateLine(String s, int i, char lastchar) {
        if (s.length() == i)
            return true;
        char c = s.charAt(i);
        if (i == 0) {
            if (c != '0' && c != '1')
                return false;
        } else {
            if (isOperator(c))
                if (isOperator(lastchar))
                    return false;
            else if (c != '0' && c != '1')
                return false;
        }
        return validateLine(s, i + 1, c);
    }

    private boolean isOperator(char c) {
        switch (c) {
            case '+':
            case '-':
                return true;
            case '*':
            case '/':
            default:
                break;

        }
        return false;
    }

    private int binaryToDez(String s) {
        if (modeGroup.getSelectedToggle() == radioDual) {
            if (s.length() > 0) {
                double r = 0;
                int m = s.length();
                for (char c : s.toCharArray()) {
                    if (c == '1') {
                        m--;
                        r = r + Math.pow(2D, m);
                    } else {
                        m--;
                    }
                }
                return (int) r;
            }
            return 0;
        } else if (modeGroup.getSelectedToggle() == radio1K) {
            return 0;
        } else if (modeGroup.getSelectedToggle() == radio2K) {
            return 0;
        }
        return 0;
    }
}
